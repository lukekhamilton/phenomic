{"head":{"title":"How to offer offline browsing experience with Phenomic","description":"What if users that already visit your website once can access it when they are offline, without a internet connection? Table of Contents…"},"body":"<p><em>What if users that already visit your website once can access it when they are\noffline, without a internet connection?</em></p>\n<h2 id=\"table-of-contents\"><a href=\"#table-of-contents\" class=\"phenomic-HeadingAnchor\">#</a>Table of Contents</h2>\n<ul>\n<li><a href=\"#appcache\">AppCache</a></li>\n<li>\n<p><a href=\"#service-worker\">Service Worker</a></p>\n<ul>\n<li><a href=\"#network-first-cache-as-fallback\">Network first, cache as fallback</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#how-to-enable-offline-support-for-phenomic\">How to enable offline support for Phenomic?</a></p>\n<ul>\n<li><a href=\"#offline-false\">\"offline\": false</a></li>\n<li><a href=\"#offline-true\">\"offline\": true</a></li>\n<li>\n<p><a href=\"#offline---object--\">\"offline\": { /* Object */ }</a></p>\n<ul>\n<li><a href=\"#serviceworker-boolean--true\">serviceWorker: boolean = true</a></li>\n<li><a href=\"#appcache-boolean--true\">appcache: boolean = true</a></li>\n<li><a href=\"#cachepatterns--key-arraystring-\">cachePatterns: { [key]: Array&#x3C;string> }:</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#faq\">FAQ</a></p>\n<ul>\n<li><a href=\"#how-can-i-provide-my-own-service-worker-logic\">How can I provide my own Service Worker logic?</a></li>\n<li>\n<p><a href=\"#can-you-show-me-some-useful-glob-patterns-\">Can you show me some useful glob patterns ?</a></p>\n<ul>\n<li><a href=\"#cache-everything-initially\">Cache everything initially</a></li>\n<li><a href=\"#only-cache-stuff-on-demand\">Only cache stuff on demand</a></li>\n<li><a href=\"#only-cache-the-app-shell\">Only cache the \"App Shell\"</a></li>\n<li><a href=\"#only-cache-app-shell-and-markdown-content-on-install-not-bundled-assets\">Only cache App Shell and markdown content on install, not bundled assets</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"appcache\"><a href=\"#appcache\" class=\"phenomic-HeadingAnchor\">#</a>AppCache</h2>\n<p>AppCache is the oldest way to offer offline supports but it's a bit brutal since\nyou can only choose what to save when the website opens.\nAll modern browsers support AppCache, including IE 10.</p>\n<ul>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/appcache/beginner/\">Learn about AppCache</a></li>\n<li><a href=\"http://caniuse.com/#search=appcache\">AppCache browser support from caniuse</a></li>\n</ul>\n<h2 id=\"service-worker\"><a href=\"#service-worker\" class=\"phenomic-HeadingAnchor\">#</a>Service Worker</h2>\n<p>⚠️ <strong>Service workers only works when using <em>HTTPS</em>, for security reasons.</strong>\n<em>Having modified network requests wide open to man in the middle attacks would\nbe really bad</em>.\nAn exception exists for <code>http://localhost</code> to help you during development.</p>\n<p>Service Worker are a specific Web worker that allows more flexible behavior\nthan Appcache.\nFor example, you can easily cache a single HTML entry point with\nCSS and JavaScript files at the start, and save for offline usage all other\nrequested content on demand.</p>\n<ul>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/service-worker/introduction/\">Learn about Service Worker</a></li>\n<li><a href=\"http://caniuse.com/#search=service-worker\">Service worker browser support from caniuse</a></li>\n</ul>\n<p>⚠️ <strong>Notice</strong></p>\n<blockquote>\n<p>If you use AppCache and Service Worker on a page, browsers that don’t support\nService Worker but do support AppCache will use that,\nand <strong>browsers that support both will ignore the AppCache and let\nService Worker take over</strong>.</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Registering_your_worker\">from MDN</a></li>\n</ul>\n</blockquote>\n<h3 id=\"network-first-cache-as-fallback\"><a href=\"#network-first-cache-as-fallback\" class=\"phenomic-HeadingAnchor\">#</a>Network first, cache as fallback</h3>\n<p>⚠️ To always offer up to date and fresh content, we choose to use a\n\"network first\" approach.\nCache will only be used as fallback (eg: no internet access).</p>\n<h2 id=\"how-to-enable-offline-support-for-phenomic\"><a href=\"#how-to-enable-offline-support-for-phenomic\" class=\"phenomic-HeadingAnchor\">#</a>How to enable offline support for Phenomic?</h2>\n<p>To enable this feature, add an <code>offline</code> field to <code>package.json</code> under\n<code>phenomic</code> section.</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-comment\">// ...</span>\n  <span class=\"hljs-string\">\"phenomic\"</span>: {\n    <span class=\"hljs-string\">\"offline\"</span>: <span class=\"hljs-literal\">true</span>\n  }\n  <span class=\"hljs-comment\">// ...</span>\n}</code></pre>\n<p>Available values are:</p>\n<h3 id=\"offline-false\"><a href=\"#offline-false\" class=\"phenomic-HeadingAnchor\">#</a><code>\"offline\": false</code></h3>\n<p>Default value.\nDisable <code>offline</code> support.</p>\n<h3 id=\"offline-true\"><a href=\"#offline-true\" class=\"phenomic-HeadingAnchor\">#</a><code>\"offline\": true</code></h3>\n<p>Use default configuration (see below) which will cache all resources\ngenerated by the build process\n(except the <code>assets</code> folder, which will only be cached <strong>on demand</strong>).</p>\n<h3 id=\"offline---object--\"><a href=\"#offline---object--\" class=\"phenomic-HeadingAnchor\">#</a><code>\"offline\": { /* Object */ }</code></h3>\n<p>An object is accepted and must contain 3 keys.\nPlease be aware that you don't need to define all of 3 keys.\nThey will be defined with their default values.</p>\n<h4 id=\"serviceworker-boolean--true\"><a href=\"#serviceworker-boolean--true\" class=\"phenomic-HeadingAnchor\">#</a><code>serviceWorker: boolean = true</code></h4>\n<p>Enable/Disable Service Worker separately</p>\n<h4 id=\"appcache-boolean--true\"><a href=\"#appcache-boolean--true\" class=\"phenomic-HeadingAnchor\">#</a><code>appcache: boolean = true</code></h4>\n<p>Enable/Disable AppCache separately.</p>\n<h4 id=\"cachepatterns--key-arraystring-\"><a href=\"#cachepatterns--key-arraystring-\" class=\"phenomic-HeadingAnchor\">#</a><code>cachePatterns: { [key]: Array&#x3C;string> }</code>:</h4>\n<p>By default cache all content generated by the build,\nexcept HTML files (which are useless if JavaScript is on - a single HTML\nis cached and is used as a bootstrap for the JavaScript client code).</p>\n<p>You can define your own glob patterns to match files to cache.\nHere is the default value</p>\n<pre><code class=\"hljs language-js\">cachePatterns: {\n  <span class=\"hljs-comment\">// cache the App Shell when Service Worker is installed</span>\n  onInstall: [ <span class=\"hljs-string\">\"index.html\"</span>, <span class=\"hljs-string\">\"phenomic.*\"</span> ],\n  <span class=\"hljs-comment\">// cache all known content after the Service worker has been installed</span>\n  afterInstall: [ <span class=\"hljs-string\">\"**\"</span>, <span class=\"hljs-string\">\":assets:\"</span> ],\n  <span class=\"hljs-comment\">// cache all other content on demand</span>\n  onDemand: [ ],\n  <span class=\"hljs-comment\">// excludes dotfiles, sourcemaps files and HTML files (only one is enough for</span>\n  <span class=\"hljs-comment\">// offline usage)</span>\n  excludes: [ <span class=\"hljs-string\">\"**/.*\"</span>, <span class=\"hljs-string\">\"**/*.map\"</span>, <span class=\"hljs-string\">\"**/*.html\"</span> ],\n},</code></pre>\n<p>⚠️ <strong>Some special strings</strong></p>\n<ul>\n<li><code>:assets:</code> can be used to catch all assets in your <code>assets</code> folder\n(not handled by webpack).</li>\n<li><code>:rest:</code> can be used to catch all unused files (in other patterns).</li>\n</ul>\n<p>Phenomic uses <a href=\"https://www.npmjs.com/package/globby\">globby</a> for matching files\nin <code>dist</code> folder.</p>\n<p>Checkout <a href=\"https://www.npmjs.com/package/globby\">globby documentation for more information</a></p>\n<p>When you will build your website and you may notice some new files and folder\nin <code>dist</code> folder such as <code>appcache</code>, <code>sw.js</code>\n(depending on the options you provided).</p>\n<p>⚠️ <strong>Note</strong>: AppCache support will not be enabled in development mode to\navoid the pain it can cause.</p>\n<hr>\n<h2 id=\"faq\"><a href=\"#faq\" class=\"phenomic-HeadingAnchor\">#</a>FAQ</h2>\n<h3 id=\"how-can-i-provide-my-own-service-worker-logic\"><a href=\"#how-can-i-provide-my-own-service-worker-logic\" class=\"phenomic-HeadingAnchor\">#</a>How can I provide my own Service Worker logic?</h3>\n<p>Under the hood, Phenomic uses the webpack\n<a href=\"https://github.com/NekR/offline-plugin\">offline-plugin</a>, so you can just use\nthis one directly in your webpack configuration with your own options.\nFor even more flexibility, you can check\n<a href=\"https://github.com/GoogleChrome/sw-precache\">sw-precache</a>\nor\n<a href=\"https://github.com/GoogleChrome/sw-toolbox\">sw-toolbox</a></p>\n<h3 id=\"can-you-show-me-some-useful-glob-patterns-\"><a href=\"#can-you-show-me-some-useful-glob-patterns-\" class=\"phenomic-HeadingAnchor\">#</a>Can you show me some useful glob patterns ?</h3>\n<p>Here are some useful patterns that should covers most use cases\n(along with the default patterns)</p>\n<h4 id=\"cache-everything-initially\"><a href=\"#cache-everything-initially\" class=\"phenomic-HeadingAnchor\">#</a>Cache everything initially</h4>\n<p>This is the default behavior, just use <code>\"offline\": true,</code>.</p>\n<h4 id=\"only-cache-stuff-on-demand\"><a href=\"#only-cache-stuff-on-demand\" class=\"phenomic-HeadingAnchor\">#</a>Only cache stuff on demand</h4>\n<pre><code class=\"hljs language-js\">cachePatterns: {\n  afterInstall: [],\n  onDemand: [ <span class=\"hljs-string\">\"**\"</span>, <span class=\"hljs-string\">\":assets:\"</span> ],\n  <span class=\"hljs-comment\">// for other keys, default values will be used</span>\n},</code></pre>\n<h4 id=\"only-cache-the-app-shell\"><a href=\"#only-cache-the-app-shell\" class=\"phenomic-HeadingAnchor\">#</a>Only cache the \"App Shell\"</h4>\n<pre><code class=\"hljs language-js\">cachePatterns: {\n  <span class=\"hljs-comment\">// app shell is cached by default onInstall</span>\n  <span class=\"hljs-comment\">// so we just need to remove patterns for others keys</span>\n  afterInstall: [],\n  onDemand: [],\n},</code></pre>\n<h4 id=\"only-cache-app-shell-and-markdown-content-on-install-not-bundled-assets\"><a href=\"#only-cache-app-shell-and-markdown-content-on-install-not-bundled-assets\" class=\"phenomic-HeadingAnchor\">#</a>Only cache App Shell and markdown content on install, not bundled assets</h4>\n<pre><code class=\"hljs language-js\">cachePatterns: {\n  afterInstall: [ <span class=\"hljs-string\">\"**/*.json\"</span> ], <span class=\"hljs-comment\">// reminder: markdown are transformed as json files</span>\n  onDemand: [ <span class=\"hljs-string\">\":rest:\"</span>, <span class=\"hljs-string\">\":assets:\"</span> ], <span class=\"hljs-comment\">// will catch all others results on demand</span>\n  <span class=\"hljs-comment\">// for other keys, default values will be used</span>\n},</code></pre>\n","__filename":"docs/advanced/offline-browsing.md","__url":"/docs/advanced/offline-browsing/","__resourceUrl":"/docs/advanced/offline-browsing/index.html","__dataUrl":"/docs/advanced/offline-browsing/index.html.5fbdabbc66a00d1141c725ebd4cfd49a.json"}