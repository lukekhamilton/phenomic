{"head":{"title":"Getting started with Phenomic","description":"üöÄ Be sure to start with the setup instructions. When everything is ready and the hello world is in front of you, you may want to add some‚Ä¶"},"body":"<p>üöÄ <strong>Be sure to start with the <a href=\"../setup/\">setup instructions</a></strong>.</p>\n<p>When everything is ready and the hello world is in front of you,\nyou may want to add some content and work on the website/app look 'n feel.</p>\n<h2 id=\"table-of-contents\"><a href=\"#table-of-contents\" class=\"phenomic-HeadingAnchor\">#</a>Table of Contents</h2>\n<ul>\n<li>\n<p><a href=\"#how-to-add-a-new-page-in-phenomic\">How to add a new page in Phenomic?</a></p>\n<ul>\n<li><a href=\"#the-front-matter\">The front-matter</a></li>\n<li><a href=\"#the-body\">The body</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#where-can-i-find-my-new-page\">Where can I find my new page?</a></p>\n<ul>\n<li><a href=\"#but-i-want-a-custom-url\">But I want a custom url!</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#how-can-i-adjust-templateslayouts\">How can I adjust templates/layouts?</a></p>\n<ul>\n<li><a href=\"#wait-a-minute-i-am-new-to-react-where-should-i-start\">Wait a minute. I am new to React, where should I start?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#back-to-the-layout-how-can-i-change-my-page-layout\">Back to the layout. How can I change my page layout?</a></p>\n<ul>\n<li><a href=\"#srcappcontainerjs\">src/AppContainer.js</a></li>\n<li><a href=\"#srclayouts\">src/layouts/*</a></li>\n</ul>\n</li>\n<li><a href=\"#how-can-i-use-a-custom-layout-for-my-page\">How can I use a custom layout for my page?</a></li>\n<li><a href=\"#any-tips-to-help-me-build-my-layouts\">Any tips to help me build my layouts?</a></li>\n<li><a href=\"#what-can-i-reuse-to-build-my-website-quickly\">What can I reuse to build my website quickly?</a></li>\n<li>\n<p><a href=\"#what-is-the-best-way-to-edit-my-styles\">What is the best way to edit my styles?</a></p>\n<ul>\n<li><a href=\"#how-to-add-variables-for-my-css-when-using-postcsscssnextcss-modules\">How to add variables for my CSS when using PostCSS/cssnext/CSS Modules?</a></li>\n<li><a href=\"#how-to-add-sass-or-less-support\">How to add Sass or LESS support?</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"how-to-add-a-new-page-in-phenomic\"><a href=\"#how-to-add-a-new-page-in-phenomic\" class=\"phenomic-HeadingAnchor\">#</a>How to add a new page in Phenomic?</h2>\n<p>It's pretty simple, you can just create a new <code>my-super-page.md</code> file in your <code>content</code> folder\n(<code>.md</code> extension is for Markdown, default supported format by Phenomic -\nbut it's easy to <a href=\"../usage/plugins/\">add more format (or replace it)</a>).</p>\n<p>Then add into it some content:</p>\n<pre><code class=\"hljs language-md\">---\n<span class=\"hljs-section\">title: My super new page\n---</span>\n\nMy super <span class=\"hljs-strong\">**content**</span>!</code></pre>\n<p>This file is composed of two sections:</p>\n<h3 id=\"the-front-matter\"><a href=\"#the-front-matter\" class=\"phenomic-HeadingAnchor\">#</a>The front-matter</h3>\n<p>The first part (between the 3 dashes <code>---</code>) contains page metadata.<br>\nYou can store anything you want.\nIt's by default a\n<a href=\"https://en.wikipedia.org/wiki/YAML#Sample_document\">YAML section</a>,\nbut you can use\n<a href=\"https://www.npmjs.com/package/gray-matter#highlights\">other formats like JSON, TOML, JavaScript...</a>.</p>\n<h3 id=\"the-body\"><a href=\"#the-body\" class=\"phenomic-HeadingAnchor\">#</a>The body</h3>\n<p>The body is the part below the 3 dashes <code>---</code>.<br>\nBy default <a href=\"https://en.wikipedia.org/wiki/Markdown#Example\">Markdown</a> is supported but\n<a href=\"../usage/plugins/\">you can easily add whatever format you want</a>.</p>\n<p>If you are new to Markdown, you might want to check those links:</p>\n<ul>\n<li><a href=\"http://whatismarkdown.com/\">What is Markdown?</a></li>\n<li><a href=\"https://guides.github.com/features/mastering-markdown/\">Mastering Markdown, a GitHub guide</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Markdown#Example\">wikipedia.org/wiki/Markdown</a></li>\n<li><a href=\"http://masteringmarkdown.com/\">masteringmarkdown.com</a></li>\n</ul>\n<h2 id=\"where-can-i-find-my-new-page\"><a href=\"#where-can-i-find-my-new-page\" class=\"phenomic-HeadingAnchor\">#</a>Where can I find my new page?</h2>\n<p>By default, the url to access your new created file will be a simple mapping\nwithout <code>.md</code> extension and clean url without extensions.</p>\n<p><strong>Examples</strong>:</p>\n<ul>\n<li><code>content/index.md</code> => <code>/</code></li>\n<li><code>content/some-page.md</code> => <code>/some-page/</code></li>\n<li><code>content/another-page/index.md</code> => <code>/another-page/</code></li>\n<li><code>content/another-page/yet-another.md</code> => <code>/another-page/yet-another/</code></li>\n</ul>\n<p>In our current example, you should have your new page accessible at\n<a href=\"http://localhost:3333/my-super-page/\">http://localhost:3333/my-super-page/</a></p>\n<h3 id=\"but-i-want-a-custom-url\"><a href=\"#but-i-want-a-custom-url\" class=\"phenomic-HeadingAnchor\">#</a>But I want a custom url!</h3>\n<p>No problem, you can still add a <code>route</code> field in the front-matter like this:</p>\n<pre><code class=\"hljs language-md\">---\ntitle: My super new page\n<span class=\"hljs-section\">route: my-super-url.html\n---</span>\n\nMy super <span class=\"hljs-strong\">**content**</span>!</code></pre>\n<p>Then your content will be accessible at\n<a href=\"http://localhost:3333/my-super-url/\">http://localhost:3333/my-super-url/</a></p>\n<hr>\n<p>‚ö†Ô∏è <strong>If you need more complex page,\n<a href=\"../usage/routing/\">you can directly rely on a React component and specify your route in the app router</a></strong>.</p>\n<hr>\n<p>Assuming you are happy with your new page, let's adjust the page layout.</p>\n<h2 id=\"how-can-i-adjust-templateslayouts\"><a href=\"#how-can-i-adjust-templateslayouts\" class=\"phenomic-HeadingAnchor\">#</a>How can I adjust templates/layouts?</h2>\n<p>Now we are going to play with the most interesting strength of Phenomic:\nyou will use <a href=\"https://facebook.github.io/react\">React</a> for layouts and all UI\ncomponents!</p>\n<h3 id=\"wait-a-minute-i-am-new-to-react-where-should-i-start\"><a href=\"#wait-a-minute-i-am-new-to-react-where-should-i-start\" class=\"phenomic-HeadingAnchor\">#</a>Wait a minute. <em>I am new to React, where should I start?</em></h3>\n<p>If you need to start with React you might want to check the following resources:</p>\n<ul>\n<li><a href=\"https://facebook.github.io/react/docs/getting-started.html\">Official \"Getting started\" with React</a></li>\n<li><a href=\"https://facebook.github.io/react/docs/tutorial.html\">Official React Tutorial</a></li>\n<li><a href=\"https://egghead.io/courses/react-fundamentals\">React Fundamentals on EggHead.io</a></li>\n<li><a href=\"https://ReactForBeginners.com/friend/MOOX\">reactforbeginners.com</a></li>\n<li><a href=\"http://academy.plot.ly/#react\">Build your first real world React.js application</a></li>\n</ul>\n<p>You might also take a look to\n<a href=\"https://github.com/petehunt/react-howto\">react-howto</a> to understand what you might need to learn and what you don't.</p>\n<p>Also learning ES6/ES2015+ is recommended.\nIt's the latest version of JavaScript. Here are some links:</p>\n<ul>\n<li><a href=\"https://babeljs.io/docs/learn-es2015/\">\"Learn ES2015\" on Babel documentation</a></li>\n<li><a href=\"https://ES6.io/friend/MOOX\">es6.io</a></li>\n<li><a href=\"http://putaindecode.io/en/articles/js/es2015/\">Posts about ES6/2015 on <em>Putain de Code !</em></a></li>\n</ul>\n<h2 id=\"back-to-the-layout-how-can-i-change-my-page-layout\"><a href=\"#back-to-the-layout-how-can-i-change-my-page-layout\" class=\"phenomic-HeadingAnchor\">#</a>Back to the layout. How can I change my page layout?</h2>\n<p>Easy. There 2 parts you can adjust that are referenced in the app routes:</p>\n<h3 id=\"srcappcontainerjs\"><a href=\"#srcappcontainerjs\" class=\"phenomic-HeadingAnchor\">#</a><code>src/AppContainer.js</code></h3>\n<p>It's the global website wrapper.\nIt contains the header, the content and the footer of your website/app.</p>\n<h3 id=\"srclayouts\"><a href=\"#srclayouts\" class=\"phenomic-HeadingAnchor\">#</a><code>src/layouts/*</code></h3>\n<p>Here is the place where you should find and add all page layouts.\nThe page we just created use the default page layout, which is (by default)\n<code>Page</code> so we will need to adjust <code>src/layouts/Page</code>.</p>\n<p><strong>Layouts are just React components</strong>, so you should be able to do anything\nyou want!</p>\n<h2 id=\"how-can-i-use-a-custom-layout-for-my-page\"><a href=\"#how-can-i-use-a-custom-layout-for-my-page\" class=\"phenomic-HeadingAnchor\">#</a>How can I use a custom layout for my page?</h2>\n<p>We will need to create a new component and references it in some places.</p>\n<p>First you need to tell Phenomic that you added a layout.\nSo you need to register your layout in <code>src/routes.js</code> in the <code>PhenomicPageContainer</code> usage.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> Page <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./layouts/Page\"</span>\n<span class=\"hljs-keyword\">import</span> PageError <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./layouts/PageError\"</span>\n<span class=\"hljs-keyword\">import</span> PageLoading <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./layouts/PageLoading\"</span>\n<span class=\"hljs-keyword\">import</span> Homepage <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./layouts/Homepage\"</span>\n<span class=\"hljs-keyword\">import</span> Post <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./layouts/Post\"</span>\n<span class=\"hljs-comment\">// ‚Üì Add your layout here</span>\n<span class=\"hljs-keyword\">import</span> MySuperLayout <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./layouts/MySuperLayout\"</span>\n\n      <span class=\"hljs-comment\">// ...</span>\n\n      &#x3C;PhenomicPageContainer\n        { ...props }\n        layouts={ {\n          Page,\n          PageError,\n          PageLoading,\n          Homepage,\n          Post,\n          MySuperLayout, <span class=\"hljs-comment\">// ‚Üê Add your layout here</span>\n        } }\n      /></code></pre>\n<p>After that you can reference your new layout in your markdown file front-matter.</p>\n<pre><code class=\"hljs language-md\">---\ntitle: My super new page\nroute: my-super-url.html\n<span class=\"hljs-section\">layout: MySuperLayout # ‚Üê Add your layout here\n---</span>\n\nMy super <span class=\"hljs-strong\">**content**</span>!</code></pre>\n<p>For the content of the layout, you can take an existing layout and adjust it\nto your need. Keep in mind that you can just consume another layout in your\nnew layout to avoid repetition! Those are just components!</p>\n<h2 id=\"any-tips-to-help-me-build-my-layouts\"><a href=\"#any-tips-to-help-me-build-my-layouts\" class=\"phenomic-HeadingAnchor\">#</a>Any tips to help me build my layouts?</h2>\n<p>We are going to implement a simple feature so you can tweak your website.</p>\n<p>Besides being able to add an image in the markdown itself, it's possible to\nadd one in the post metadata to use it later in your layouts.</p>\n<pre><code class=\"hljs language-md\">---\ntitle: My super new page\nroute: my-super-url.html\nlayout: MySuperLayout\n<span class=\"hljs-section\">featuredImage: someImageUrl.png # ‚Üê Add your image here\n---</span>\n\nMy super <span class=\"hljs-strong\">**content**</span>!</code></pre>\n<hr>\n<p>‚ö†Ô∏è It is possible to add any information in the front-matter, and you might be\nable to do almost anything you can think of, even add an images gallery!</p>\n<hr>\n<p>The front-matter data are sent as <code>props</code> in your layouts, and is\navailable under <code>props.head</code>.\nThis allows you to manipulate it normally using JavaScript.</p>\n<p>Supposing you want to use your <code>featuredImage</code> in a list of pages or posts (<code>PagesList</code> in the default theme)\nyou will have to change your <code>PagePreview</code> to make use of that since <code>PagesList</code> just render a series of <code>PagePreview</code> components.</p>\n<p>Changing the <code>PagePreview</code> component will change how the \"latest posts\" are rendered on your homepage.</p>\n<hr>\n<p>‚ö†Ô∏è The <code>Homepage</code> layout filters the latest posts by <code>Post</code> layout. If you don't\nsee your new page in this list, either change your new page to have the <code>Post</code>\nlayout, or edit the homepage collections filter to include your custom layout\nby checking out the <a href=\"https://phenomic.io/docs/usage/collections/\">How to use Collections</a> page.</p>\n<hr>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> PagePreview = ({ __url, title, date , featuredImage }) => {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      </span>&#x3C;img src={ featuredImage } />\n      // ...\n    &#x3C;/div><span class=\"xml\">\n  )\n}\nPagePreview.propTypes = {\n  __url: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  date: PropTypes.string,\n  featuredImage: PropTypes.string\n}</span></code></pre>\n<p>Notice how the <code>featuredImage</code> was added to the <code>propTypes</code> (for validation), and a parameter <code>featuredImage</code> was added on the arguments list (the <a href=\"http://putaindecode.io/en/articles/js/es2015/destructuring/\">destructured</a> <code>props</code>).</p>\n<p>This simple way is a good example on how to can access any metadata that you can\nadd in your front-matter. With that in mind, you now know how to manipulate\nand display custom data in React component render functions.</p>\n<h2 id=\"what-can-i-reuse-to-build-my-website-quickly\"><a href=\"#what-can-i-reuse-to-build-my-website-quickly\" class=\"phenomic-HeadingAnchor\">#</a>What can I reuse to build my website quickly?</h2>\n<p>Keep in mind that React components are like Lego blocks.</p>\n<p>Here are some interesting tools or libraries you should know about:</p>\n<ul>\n<li><a href=\"https://github.com/roman01la/html-to-react-components\">html-to-react-components</a>, a tool to build React components from HTML code,</li>\n<li><a href=\"http://jxnblk.com/rebass/\">rebass</a>, a set of Configurable React Stateless Functional UI Components,</li>\n<li><a href=\"http://jxnblk.com/reflexbox/\">reflexbox</a>, a Responsive React flexbox grid system higher order component,</li>\n<li><a href=\"http://react-toolbox.com/#/\">React Toolbox</a> a set of React components implementing Google Material Design,</li>\n<li><a href=\"http://davidwells.io/19-open-source-react-component-libraries-to-use-in-your-next-project/\">A list of some Open Source React Component Libraries</a></li>\n</ul>\n<p><em>Feel free to edit this page to add more resources.</em></p>\n<h2 id=\"what-is-the-best-way-to-edit-my-styles\"><a href=\"#what-is-the-best-way-to-edit-my-styles\" class=\"phenomic-HeadingAnchor\">#</a>What is the best way to edit my styles?</h2>\n<p>Here is a short explanation on what you can do by default.</p>\n<ul>\n<li><code>src/**/*.css</code> files can be imported in React Component since they are\nloaded via <a href=\"https://github.com/css-modules/css-modules\">CSS modules</a>.\nThis basically means you can't have conflict with class names.</li>\n<li><code>src/**/*.global.css</code> files are normal global CSS files, handy to define rules\nfor html/body and for third party code (eg: a code highlight theme).</li>\n</ul>\n<p>By default files are processed via\n<a href=\"https://github.com/postcss/postcss\">PostCSS</a> with <a href=\"http://cssnext.io/\">cssnext</a>\nbut you can adjust <code>webpack.config.babel.js</code> file to support anything you want.</p>\n<hr>\n<p>‚ö†Ô∏è We have a\n<a href=\"../usage/styling/\">dedicated section for styling components</a>,\nwhy don't you take a look?</p>\n<hr>\n<h3 id=\"how-to-add-variables-for-my-css-when-using-postcsscssnextcss-modules\"><a href=\"#how-to-add-variables-for-my-css-when-using-postcsscssnextcss-modules\" class=\"phenomic-HeadingAnchor\">#</a>How to add variables for my CSS when using PostCSS/cssnext/CSS Modules?</h3>\n<p>If you want to share some variables in your CSS or CSS modules,\nyou can rely on cssnext support of CSS custom properties to do so\n(<a href=\"https://github.com/postcss/postcss-custom-properties#readme\">limited to :root</a>):</p>\n<p>The more effcient way to have global variables is add to some values in cssnext\nconfiguration <code>customProperties.variables</code> entry in <code>webpack.config.babel.js</code> :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss-cssnext\"</span>)({\n  browsers: <span class=\"hljs-string\">\"last 2 versions\"</span>,\n  features: {\n    customProperties: {\n      variables: {\n        successColor: <span class=\"hljs-string\">'green'</span>,\n        errorColor: <span class=\"hljs-string\">'red'</span>\n      }\n      <span class=\"hljs-comment\">// not that instead of an object, you can add here a js files</span>\n      <span class=\"hljs-comment\">// variables: require(\"./variables.js\")</span>\n      <span class=\"hljs-comment\">// where you do</span>\n      <span class=\"hljs-comment\">// modules.export = { key: \"value\" }</span>\n    }\n  }\n})</code></pre>\n<p>Now simply use the variable in your CSS :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.buttonSuccess</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--successColor);\n}</code></pre>\n<h3 id=\"how-to-add-sass-or-less-support\"><a href=\"#how-to-add-sass-or-less-support\" class=\"phenomic-HeadingAnchor\">#</a>How to add Sass or LESS support?</h3>\n<p>If you really want to add Sass or LESS for you styles you can replace in your\n<code>webpack.config.babel.js</code> <code>postcss-loader</code> by <code>sass-loader</code> or <code>less-loader</code>:</p>\n<ul>\n<li>\n<p>Install dependencies</p>\n<ul>\n<li><code>npm install --save-dev node-sass sass-loader</code></li>\n<li>or <code>npm install --save-dev less less-loader</code></li>\n</ul>\n</li>\n<li>\n<p>Adjust <code>webpack.config.babel.js</code> configuration for .css</p>\n<ul>\n<li>duplicate css section and replace <code>.css</code> by <code>.sass</code> (or <code>.less</code>)</li>\n<li>or directly replace <code>.css</code> by <code>.sass</code> (or <code>.less</code>).</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>üí¨ <a href=\"https://gitter.im/MoOx/phenomic\">If you have more questions, be sure to ask on our community chat!</a></p>\n<hr>\n<p>ü§ó Now have fun!</p>\n<p><strong>Take a look to the <a href=\"../usage/\">rest of the documentation</a> where you will\nfind more details on everything about Phenomic and how to use it</strong>.</p>\n","__filename":"docs/getting-started.md","__url":"/docs/getting-started/","__resourceUrl":"/docs/getting-started/index.html","__dataUrl":"/docs/getting-started/index.html.89a87ebd95bfe01c72e4dc2b87404c97.json"}