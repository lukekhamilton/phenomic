{"head":{"title":"How to code things for your app/website with Phenomic","incomplete":true,"description":"Phenomic is based on JavaScript. So you can use any npm packages you want or raw JavaScript to code anything you want. Phenomic is alsoâ€¦"},"body":"<p>Phenomic is based on JavaScript.\nSo you can use any <a href=\"https://www.npmjs.com/\">npm</a> packages you want\nor raw JavaScript to code anything you want.</p>\n<p>Phenomic is also based on the <a href=\"http://facebook.github.io/react/\">React</a> library\nand ecosystem.\nBe sure to check\n<a href=\"https://github.com/petehunt/react-howto\">how to tackle the React ecosystem</a>.</p>\n<h2 id=\"constants\"><a href=\"#constants\" class=\"phenomic-HeadingAnchor\">#</a>Constants</h2>\n<p>Several constants are exposed (injected) in your JavaScript code in\n<code>process.env</code>:</p>\n<ul>\n<li><code>process.env.NODE_ENV</code>: \"production\" for production (static) build</li>\n<li><code>process.env.PHENOMIC_USER_PATHNAME</code>: the base path of your website/app</li>\n<li><code>process.env.PHENOMIC_USER_URL</code>: your website homepage url (<code>package.json/homepage</code> field)</li>\n<li><code>process.env.PHENOMIC_NAME</code>: Phenomic pretty name</li>\n<li><code>process.env.PHENOMIC_VERSION</code>: Phenomic version</li>\n<li><code>process.env.PHENOMIC_HOMEPAGE</code>: Phenomic homepage url</li>\n<li><code>process.env.PHENOMIC_REPOSITORY</code>: Phenomic repository url</li>\n</ul>\n<h2 id=\"available-modules\"><a href=\"#available-modules\" class=\"phenomic-HeadingAnchor\">#</a>Available modules</h2>\n<p>@todo document all public modules</p>\n<h3 id=\"components\"><a href=\"#components\" class=\"phenomic-HeadingAnchor\">#</a>Components</h3>\n<h4 id=\"pagecontainer\"><a href=\"#pagecontainer\" class=\"phenomic-HeadingAnchor\">#</a><code>PageContainer</code></h4>\n<p>Component to define and declare all pages layouts.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">``</span><span class=\"hljs-keyword\">import</span> { PageContainer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"phenomic\"</span><span class=\"hljs-string\">``</span>\n\n<span class=\"hljs-comment\">// @todo show usage</span></code></pre>\n<p><a href=\"https://github.com/MoOx/phenomic/blob/master/docs/src/routes.js\">Check the usage in the phenomic-theme-base.</a></p>\n<h4 id=\"bodycontainer\"><a href=\"#bodycontainer\" class=\"phenomic-HeadingAnchor\">#</a><code>BodyContainer</code></h4>\n<p>This component should be used to wrap pages <code>body</code>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { BodyContainer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"phenomic\"</span>\n\n<span class=\"hljs-comment\">// ...</span>\n<span class=\"hljs-comment\">// in this example, Page is used as a layout</span>\n<span class=\"hljs-comment\">// and declared in a PageContainer usage</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Page</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n\n  <span class=\"hljs-comment\">// ...</span>\n\n  render() {\n    <span class=\"hljs-keyword\">const</span> { props } = <span class=\"hljs-keyword\">this</span>\n    <span class=\"hljs-keyword\">const</span> { body } = props\n    <span class=\"hljs-comment\">// ...</span>\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n        /* ... */\n        </span>&#x3C;BodyContainer>{ body }&#x3C;/BodyContainer><span class=\"xml\">\n        /* === </span>&#x3C;BodyContainer>{ this.props.body }&#x3C;/BodyContainer><span class=\"xml\"> *\n        /* ... */\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    )\n  }\n}</code></pre>\n<p><a href=\"https://github.com/MoOx/phenomic/blob/master/themes/phenomic-theme-base/src/layouts/Page/index.js\">Check the usage in the phenomic-theme-base.</a></p>\n<h3 id=\"utilities\"><a href=\"#utilities\" class=\"phenomic-HeadingAnchor\">#</a>Utilities</h3>\n<h3 id=\"joinuri\"><a href=\"#joinuri\" class=\"phenomic-HeadingAnchor\">#</a><code>joinUri</code></h3>\n<p>Simple utility to join uri parts. Ensure that there is no missing or duplicate\nslashes.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { joinUri } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"phenomic\"</span>\n\njoinUri(<span class=\"hljs-string\">\"some\"</span>, <span class=\"hljs-string\">\"thing\"</span>) <span class=\"hljs-comment\">// \"some/thing\"</span>\njoinUri(<span class=\"hljs-string\">\"some\"</span>, <span class=\"hljs-string\">\"/thing\"</span>) <span class=\"hljs-comment\">// \"some/thing\"</span>\njoinUri(<span class=\"hljs-string\">\"some/\"</span>, <span class=\"hljs-string\">\"/thing\"</span>) <span class=\"hljs-comment\">// \"some/thing\"</span>\njoinUri(<span class=\"hljs-string\">\"some\"</span>, <span class=\"hljs-string\">\"thing\"</span>, <span class=\"hljs-string\">\"else\"</span>), <span class=\"hljs-comment\">// \"some/thing/else\"</span>\njoinUri(<span class=\"hljs-string\">\"https://this/\"</span>, <span class=\"hljs-string\">\"/one/\"</span>, <span class=\"hljs-string\">\"/thing/\"</span>), <span class=\"hljs-comment\">// \"https://this/one/thing/\"</span></code></pre>\n","__filename":"docs/usage/scripting.md","__url":"/docs/usage/scripting/","__resourceUrl":"/docs/usage/scripting/index.html","__dataUrl":"/docs/usage/scripting/index.html.e60e2d4b20f9aa3c69e292ebc3633d6c.json"}