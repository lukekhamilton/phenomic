{"head":{"title":"Generate dynamic pages by leveraging Phenomic routing capabilities","description":"Phenomic uses react-router. By default Phenomic uses a single wildcard route (all requested urls are send to the PageContainer) in order to…"},"body":"<p>Phenomic uses <a href=\"https://github.com/reactjs/react-router\">react-router</a>.\nBy default Phenomic uses a single wildcard route\n(all requested urls are send to the <code>PageContainer</code>)\nin order to render files consumed by Phenomic.</p>\n<p>But by exploiting <code>react-router</code> capabilities, we do more cool things like\ngenerating dynamic pages for each metadata Phenomic can find in your files.</p>\n<h2 id=\"add-a-react-component-as-a-page\"><a href=\"#add-a-react-component-as-a-page\" class=\"phenomic-HeadingAnchor\">#</a>Add a React component as a page</h2>\n<p>You can edit <code>src/routes.js</code> (default location of the file containing routes)\nto add a route to reference your component:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> HomePage <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./pages/Homepage\"</span>\n\n<span class=\"hljs-comment\">// ...</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">component</span>=<span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">AppContainer</span> }></span>\n    </span>&#x3C;Route path=\"/\" component={ HomePage } />\n    &#x3C;Route path=\"*\" component={ PageContainer } />\n  &#x3C;/Route>\n)</code></pre>\n<p>This example is pretty simple, but hopefully, you can do more complex things!</p>\n<h2 id=\"uses-react-router-routes-parameters-to-create-dynamic-pages\"><a href=\"#uses-react-router-routes-parameters-to-create-dynamic-pages\" class=\"phenomic-HeadingAnchor\">#</a>Uses React-router routes parameters to create dynamic pages</h2>\n<p>A classic example will be to generate one page per <code>tag</code> find in your files.\nLet's say you have in your files metadata a <code>tags</code> field like in this example</p>\n<pre><code class=\"hljs language-md\">---\ntitle: My static website is not static anymore\ntags:      # What about generating pages like /tag/* to list your content ?\n  - static\n  - blog\n<span class=\"hljs-section\">  - react\n---</span>\n\nNow that I use Phenomic, my website is so dynamic!\nThis is crazy stuff blah blah [...]</code></pre>\n<p>As you can see, we have a list of tags (but again, that can be other data).\nPhenomic automatically find all possibles data in your metadata and allows you\nto use those to define new routes via <code>react-router</code>.</p>\n<p>⚠️ <em>For now, Phenomic can handle strings and numbers values,\nas well as Array of strings and numbers.</em></p>\n<p>You can for example adjust <code>src/routes.js</code>\n(default location of the file containing routes)\nto add routes to list files related to your tags:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ...</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">component</span>=<span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">AppContainer</span> }></span>\n    </span>&#x3C;Route path=\"tag/:tag\" component={ ContainerThatWillListPostByTag } />\n    &#x3C;Route path=\"*\" component={ PageContainer } />\n  &#x3C;/Route>\n)</code></pre>\n<p>Obviously, you will need to define <code>ContainerThatWillListPostByTag</code>\n(and find a better name for it) and\n<a href=\"../collections/\">handle the logic for filtering the collection results</a>.</p>\n<p>⚠️ <strong>You might noticed that Phenomic will correctly map <code>tags</code> in routes as\n<code>:tag</code>.</strong></p>\n<p>The magic rules are simple (first rules applied first):</p>\n<ul>\n<li><code>*ies</code> → <code>*y</code></li>\n<li><code>*s</code> → <code>*</code></li>\n</ul>\n<p>Some examples (metadata key -> route key):</p>\n<ul>\n<li><code>category</code> → <code>:category</code></li>\n<li><code>categories</code> → <code>:category</code></li>\n<li><code>tag</code> → <code>:tag</code></li>\n<li><code>tags</code> → <code>:tag</code></li>\n<li><code>author</code> → <code>:author</code></li>\n<li><code>authors</code> → <code>:author</code></li>\n<li>and so on...</li>\n</ul>\n<p>Here is an example on a website that <a href=\"https://github.com/putaindecode/putaindecode.io/commit/092a040\">implemented some tags and authors pages</a></p>\n<p>⚠️ <em>Pagination is not supported yet, but it's on Phenomic roadmap.</em></p>\n<h1 id=\"handling-redirection\"><a href=\"#handling-redirection\" class=\"phenomic-HeadingAnchor\">#</a>Handling Redirection</h1>\n<p>Phenomic static build does not yet handle react-router redirects so if you are making <code>onEnter</code> redirection call make sure to wrap with <code>typeof window !== 'undefined'</code> check</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Won't build</span>\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n<span class=\"hljs-keyword\">import</span> { Route } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-router'</span>\n<span class=\"hljs-keyword\">import</span> Index <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./Index'</span>\n<span class=\"hljs-keyword\">import</span> Layouts <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./layouts'</span>\n<span class=\"hljs-keyword\">import</span> Login <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/Login'</span>\n<span class=\"hljs-keyword\">import</span> AuthService <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./utils/AuthService'</span>\n\n<span class=\"hljs-keyword\">const</span> auth = <span class=\"hljs-keyword\">new</span> AuthService(__AUTH0_CLIENT_ID__, __AUTH0_DOMAIN__)\n<span class=\"hljs-keyword\">const</span> requireAuth = (nextState, replace) => {\n    <span class=\"hljs-built_in\">console</span>.log(auth)\n    <span class=\"hljs-keyword\">if</span> (!auth.loggedIn()) {\n      replace({ pathname: <span class=\"hljs-string\">'/login'</span> }) <span class=\"hljs-comment\">// Does redirect and will break static build</span>\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">component</span>=<span class=\"hljs-string\">{Index}</span> <span class=\"hljs-attr\">auth</span>=<span class=\"hljs-string\">{auth}</span>></span>\n    </span>&#x3C;Route path='/protected' component={Login} onEnter={requireAuth} auth={auth} />\n    &#x3C;Route path='*' component={Layouts} />\n  &#x3C;/Route>\n)</code></pre>\n<p>Fix and wrap onEnter with <code>typeof window !== 'undefined'</code></p>\n<pre><code>// Will build. Yay!\nimport React from 'react'\nimport { Route } from 'react-router'\nimport Index from './Index'\nimport Layouts from './layouts'\nimport Login from './components/Login'\nimport AuthService from './utils/AuthService'\n\nconst auth = new AuthService(__AUTH0_CLIENT_ID__, __AUTH0_DOMAIN__)\nconst isClient = typeof window !== 'undefined'\nlet requireAuth = null // set to null for static build only\n\nif (isClient) {\n requireAuth = (nextState, replace) => {\n    console.log(auth)\n    if (!auth.loggedIn()) {\n      replace({ pathname: '/login' })\n    }\n  }\n}\n\nexport default (\n  &#x3C;Route component={Index} auth={auth}>\n    &#x3C;Route path='/protected' component={Login} onEnter={requireAuth} auth={auth} />\n    &#x3C;Route path='*' component={Layouts} />\n  &#x3C;/Route>\n)\n</code></pre>\n","__filename":"docs/usage/routing.md","__url":"/docs/usage/routing/","__resourceUrl":"/docs/usage/routing/index.html","__dataUrl":"/docs/usage/routing/index.html.52f82ea35662412de45061b5f5cfd0a7.json"}