{"head":{"title":"Automatic deployment of your Phenomic project with GitHub Pages","description":"If you want to deploy to a custom domain, be sure to use the phenomic.CNAME option in your configuration You will have multiple…"},"body":"<p><strong>If you want to deploy to a custom domain, be sure to use the <code>phenomic.CNAME</code> option in your\n<a href=\"../configuration/\">configuration</a></strong></p>\n<p>You will have multiple possibilities to deploy your <code>dist</code> folder on the\n<code>gh-pages</code> branch.</p>\n<p>You can define your own method by using something like</p>\n<ul>\n<li>a very simple script (see below)</li>\n<li><a href=\"https://www.npmjs.com/package/buildbranch\">buildbranch</a></li>\n<li><a href=\"https://github.com/X1011/git-directory-deploy\">git-directory-deploy</a></li>\n<li><a href=\"https://www.npmjs.com/package/gh-pages\">gh-pages</a></li>\n</ul>\n<hr>\n<p>The following instructions show you how to do it by force pushing your build to\nthe <code>gh-pages</code> branch,\nbut it should not be very different from other solutions.</p>\n<h2 id=\"why-force-pushing\"><a href=\"#why-force-pushing\" class=\"phenomic-HeadingAnchor\">#</a>Why force pushing?</h2>\n<p>Why do you want to keep track of the builded website when you can just rebuild\nit any time?<br>\n<strong>Keep in mind that the branch can become huge since builded website is mainly\nsingle line HTML and JSON file (diff is expensive).</strong><br>\nBy just keeping a single builded version, you avoid your repo to unnecessarily grow in size.</p>\n<h2 id=\"create-the-script\"><a href=\"#create-the-script\" class=\"phenomic-HeadingAnchor\">#</a>Create the script</h2>\n<p>The script below will get a <code>GIT_DEPLOY_REPO</code> repo to deploy (or by default\nthe <code>repository</code> url of your <code>package.json</code>).</p>\n<h3 id=\"macos--linux\"><a href=\"#macos--linux\" class=\"phenomic-HeadingAnchor\">#</a>macOS / Linux</h3>\n<p>You can paste it under <code>./scripts/deploy.sh</code>.</p>\n<pre><code class=\"hljs language-sh\"><span class=\"hljs-meta\">#!/usr/bin/env bash</span>\nGIT_DEPLOY_REPO=<span class=\"hljs-variable\">${GIT_DEPLOY_REPO:-$(node -e 'process.stdout.write(require(\"./package.json\").repository)')}</span>\n\n<span class=\"hljs-built_in\">cd</span> dist &#x26;&#x26; \\\n$(npm bin)/rimraf .git\ngit init &#x26;&#x26; \\\ngit add . &#x26;&#x26; \\\ngit commit -m <span class=\"hljs-string\">\"Deploy to GitHub Pages\"</span> &#x26;&#x26; \\\ngit push --force <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${GIT_DEPLOY_REPO}</span>\"</span> master:gh-pages\n\n<span class=\"hljs-comment\"># ! #</span>\n<span class=\"hljs-comment\"># IF YOU USE A USERNAME.GITHUB.IO ROOT DOMAIN, PLEASE READ THE WARNING BELOW</span>\n<span class=\"hljs-comment\"># ! #</span></code></pre>\n<p>⚠️ Be sure to add correct permissions to the file</p>\n<pre><code class=\"hljs language-console\">chmod +x .<span class=\"hljs-regexp\">/scripts/</span>deploy.sh</code></pre>\n<h3 id=\"windows\"><a href=\"#windows\" class=\"phenomic-HeadingAnchor\">#</a>Windows</h3>\n<p>@todo (should not be hard to adapt the shell script above into a bat script,\nplease make a PR if you do it).</p>\n<hr>\n<h3 id=\"️-warning-for-githubio-domain\"><a href=\"#%EF%B8%8F-warning-for-githubio-domain\" class=\"phenomic-HeadingAnchor\">#</a>⚠️ WARNING for <code>*.github.io</code> domain</h3>\n<p>Normal repositories on GitHub consider (by default) that GitHub Pages will be\non a <a href=\"%5D(https://help.github.com/articles/user-organization-and-project-pages/)\"><code>gh-pages</code> branch</a>.<br>\n<strong>But for <code>*.github.io</code> domain, it's the <em>master</em> branch.</strong></p>\n<p>So if you want to use this script for a <code>*.github.io</code> repo, you will need to\nadjust the last line argument to <code>master</code> (in place of <code>gh-pages</code>).</p>\n<p>Your branch with your website sources has to be something like <code>src</code>\n(<strong>anything but <code>master</code></strong>) in order to deploy your source branch to\n<code>master</code>.</p>\n<p>So last line should be</p>\n<pre><code class=\"hljs language-sh\">git push --force <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${GIT_DEPLOY_REPO}</span>\"</span> master</code></pre>\n<hr>\n<h3 id=\"add-a-command-to-deploy\"><a href=\"#add-a-command-to-deploy\" class=\"phenomic-HeadingAnchor\">#</a>Add a command to deploy</h3>\n<p>In your <code>package.json</code>, add the following items under the <code>scripts</code> section:</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"scripts\"</span>: {\n    <span class=\"hljs-comment\">// ...</span>\n    <span class=\"hljs-string\">\"predeploy\"</span>: <span class=\"hljs-string\">\"npm run build\"</span>,\n    <span class=\"hljs-string\">\"deploy\"</span>: <span class=\"hljs-string\">\"./scripts/deploy.sh\"</span>\n  }\n}</code></pre>\n<p>Now run:</p>\n<pre><code class=\"hljs language-sh\">npm run deploy</code></pre>\n<p>It should be good!</p>\n<h3 id=\"automatically-with-travis-ci\"><a href=\"#automatically-with-travis-ci\" class=\"phenomic-HeadingAnchor\">#</a>Automatically with Travis-CI</h3>\n<p>Here is one quick and easy way to setup automatic deployment on each commit\npushed to master that should take a couple of minutes to setup:</p>\n<h4 id=\"enable-travis-ci-for-your-repository\"><a href=\"#enable-travis-ci-for-your-repository\" class=\"phenomic-HeadingAnchor\">#</a>Enable Travis-CI for your repository</h4>\n<ul>\n<li><a href=\"https://travis-ci.org/profile\">https://travis-ci.org/profile</a></li>\n</ul>\n<p>You may need to hit the <code>Sync</code> button to see your repository if it's not there.</p>\n<h5 id=\"create-a-travisyml\"><a href=\"#create-a-travisyml\" class=\"phenomic-HeadingAnchor\">#</a>Create a <code>.travis.yml</code></h5>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-attr\">language:</span> node_js\n<span class=\"hljs-attr\">node_js:</span>\n<span class=\"hljs-bullet\">  -</span> <span class=\"hljs-string\">'5'</span>\n<span class=\"hljs-bullet\">  -</span> <span class=\"hljs-string\">'4'</span>\n\n<span class=\"hljs-comment\"># (by default, Travis will run \"npm test\" script when the language is node_js)</span>\n\n<span class=\"hljs-comment\"># deploy is run after \"npm test\"</span>\n<span class=\"hljs-attr\">deploy:</span>\n  <span class=\"hljs-comment\"># keep the build we just made with \"npm test\" (dist/)</span>\n<span class=\"hljs-attr\">  skip_cleanup:</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\"># define the script to use for deployment</span>\n<span class=\"hljs-attr\">  provider:</span> script\n<span class=\"hljs-attr\">  script:</span> ./scripts/deploy.sh\n\n  <span class=\"hljs-comment\"># only run on one version of node (v5 here)</span>\n<span class=\"hljs-attr\">  on:</span>\n<span class=\"hljs-attr\">    branch:</span> master <span class=\"hljs-comment\"># ⚠️ OR SRC IF YOU USE USERNAME.GITHUB.IO</span>\n<span class=\"hljs-attr\">    node:</span> <span class=\"hljs-string\">'5'</span></code></pre>\n<h5 id=\"generate-a-github-token\"><a href=\"#generate-a-github-token\" class=\"phenomic-HeadingAnchor\">#</a>Generate a GitHub token</h5>\n<ul>\n<li><a href=\"https://github.com/settings/tokens/new\">https://github.com/settings/tokens/new</a></li>\n</ul>\n<p>With only <code>repo</code> or <code>public_repo</code> scopes.</p>\n<h5 id=\"copy-and-encrypt-this-new-token\"><a href=\"#copy-and-encrypt-this-new-token\" class=\"phenomic-HeadingAnchor\">#</a>Copy and encrypt this new token</h5>\n<p><em>Note: replace <code>{YOU/YOUR_REPO}</code> and <code>{YOUR_TOKEN}</code>.</em></p>\n<pre><code class=\"hljs language-sh\">npm i -g travis-encrypt\ntravis-encrypt --add --repo {YOU/YOUR_REPO} GITHUB_TOKEN={YOUR_TOKEN}</code></pre>\n<p>⚠️ <strong>Be sure to save your <code>.travis.yml</code> before running the command\nabove since <code>travis-encrypt</code> will require the file to inject the encrypted key</strong></p>\n<p>Below the <code>secure</code> row added, you need to add a line to specify the repo with\nthe token:</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-comment\"># ...</span>\n\n<span class=\"hljs-attr\">env:</span>\n<span class=\"hljs-attr\">  global:</span>\n<span class=\"hljs-attr\">    - secure:</span> >-\n        vmBZf.....FYI=\n    <span class=\"hljs-comment\"># UPDATE YOU/YOUR_REPO IN THE URL BELOW</span>\n<span class=\"hljs-bullet\">    -</span> GIT_DEPLOY_REPO=https://$GITHUB_TOKEN@github.com/YOU/YOUR_REPO.git</code></pre>\n<h5 id=\"adjust-the-deploy-script\"><a href=\"#adjust-the-deploy-script\" class=\"phenomic-HeadingAnchor\">#</a>Adjust the deploy script</h5>\n<p><strong>You need to add a git user email and name:</strong></p>\n<pre><code class=\"hljs language-sh\"><span class=\"hljs-meta\">#!/usr/bin/env bash</span>\nGIT_DEPLOY_REPO=<span class=\"hljs-variable\">${GIT_DEPLOY_REPO:-$(node -e 'process.stdout.write(require(\"./package.json\").repository)')}</span>\n\n<span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$TRAVIS</span>\"</span> = <span class=\"hljs-string\">\"true\"</span> ]\n<span class=\"hljs-keyword\">then</span>\n  <span class=\"hljs-comment\"># git need this, on Travis-CI nobody is defined</span>\n  git config --global user.name <span class=\"hljs-string\">\"Travis CI\"</span> &#x26;&#x26; \\\n  git config --global user.email <span class=\"hljs-string\">\"travis@travis-ci.org\"</span>\n<span class=\"hljs-keyword\">fi</span>\n\n<span class=\"hljs-built_in\">cd</span> dist &#x26;&#x26; \\\n$(npm bin)/rimraf .git &#x26;&#x26; \\\ngit init &#x26;&#x26; \\\ngit add . &#x26;&#x26; \\\ngit commit -m <span class=\"hljs-string\">\"Deploy to GitHub Pages\"</span> &#x26;&#x26; \\\ngit push --force <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${GIT_DEPLOY_REPO}</span>\"</span> master:gh-pages</code></pre>\n<h5 id=\"ensure-that-the-build-is-done-on-the-ci\"><a href=\"#ensure-that-the-build-is-done-on-the-ci\" class=\"phenomic-HeadingAnchor\">#</a>Ensure that the build is done on the CI</h5>\n<p>If not already made, add a <code>test</code> script in your <code>package.json</code> <code>scripts</code>\nsection.</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"scripts\"</span>: {\n    <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-string\">\"npm run build\"</span>,\n    <span class=\"hljs-comment\">// ...</span>\n    <span class=\"hljs-string\">\"predeploy\"</span>: <span class=\"hljs-string\">\"npm run build\"</span>,\n    <span class=\"hljs-string\">\"deploy\"</span>: <span class=\"hljs-string\">\"./scripts/deploy.sh\"</span>\n  }\n}</code></pre>\n<p>Now, commit and push to master, wait a couple of minutes and it should be good.</p>\n<p><em>If you plan to rely on Travis only, you can remove the <code>predeploy</code> and\n<code>deploy</code> scripts that we defined earlier.</em>\nOr you can keep it, just in case.</p>\n","__filename":"docs/usage/gh-pages.md","__url":"/docs/usage/gh-pages/","__resourceUrl":"/docs/usage/gh-pages/index.html","__dataUrl":"/docs/usage/gh-pages/index.html.18fe8e725510a2d1b7df4e7a5bbe6cc2.json"}