{"head":{"title":"Writing and consuming plugins for Phenomic","description":"For now, Phenomic supports plugins via the phenomicLoader. You can easily do almost anything you want with a plugin to affect a file‚Ä¶"},"body":"<p>For now, Phenomic supports plugins via the <code>phenomicLoader</code>.</p>\n<p>You can easily do almost anything you want with a plugin to affect a file\nconsumed by the <code>phenomicLoader</code>.</p>\n<p>A plugin is just a function that accepts some parameters and that must return\na modified collection item that will be added to the collection.</p>\n<p>The idea is to work on this kind of object:</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-comment\">// front-matter data</span>\n  head: {\n    title: <span class=\"hljs-string\">\"Phenomic Is Using React, You'll Never Guess What Happened Next!\"</span>,\n    date: <span class=\"hljs-string\">\"2016-12-31\"</span>,\n    clickbait: <span class=\"hljs-literal\">true</span>,\n  },\n  <span class=\"hljs-comment\">// content of the file below the front-matter</span>\n  body: <span class=\"hljs-string\">\"React means the website is not static, but dynamic! Blah blah [...]\"</span>,\n}</code></pre>\n<p>Plugin might be used to transform the content depending on its format(\n<a href=\"https://en.wikipedia.org/wiki/Markdown\">Markdown</a>,\n<a href=\"https://en.wikipedia.org/wiki/AsciiDoc\">AsciiDoc</a>,\n<a href=\"https://en.wikipedia.org/wiki/Textile_(markup_language)\">Textile</a>.\n<a href=\"https://en.wikipedia.org/wiki/Txt2tags\">Txt2tags</a>\n<a href=\"https://en.wikipedia.org/wiki/LaTeX\">LaTeX</a>.)</p>\n<p>See the last section to know how to write a plugin (spoiler: it's easy).</p>\n<h2 id=\"existing-plugins\"><a href=\"#existing-plugins\" class=\"phenomic-HeadingAnchor\">#</a>Existing Plugins</h2>\n<p>For now, plugins are accessible in <code>phenomic/lib/loader-plugin-*</code>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> initHeadPropertyFromConfig <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"phenomic/lib/loader-plugin-init-head-property-from-config\"</span></code></pre>\n<p><em>This might change if phenomic is split into multiple packages.</em>\nSee <a href=\"https://github.com/MoOx/phenomic/issues/598\">#598</a> for more informations.</p>\n<h3 id=\"phenomiclibloader-plugin-init-body-property-from-content\"><a href=\"#phenomiclibloader-plugin-init-body-property-from-content\" class=\"phenomic-HeadingAnchor\">#</a><code>phenomic/lib/loader-plugin-init-body-property-from-content</code></h3>\n<p>This plugin initializes the <code>body</code> property from data retrieved in the file.\nIt takes the content of the input that is below the front-matter.</p>\n<h3 id=\"phenomiclibloader-plugin-init-head-property-from-config\"><a href=\"#phenomiclibloader-plugin-init-head-property-from-config\" class=\"phenomic-HeadingAnchor\">#</a><code>phenomic/lib/loader-plugin-init-head-property-from-config</code></h3>\n<p>This plugin initializes in the <code>head</code> property from <code>defaultConfig</code> in the\nwebpack <code>phenomic</code> configuration section.\nIt won't override existing key/values in the <code>head</code> if there is any.</p>\n<h3 id=\"phenomiclibloader-plugin-init-head-property-from-content\"><a href=\"#phenomiclibloader-plugin-init-head-property-from-content\" class=\"phenomic-HeadingAnchor\">#</a><code>phenomic/lib/loader-plugin-init-head-property-from-content</code></h3>\n<p>This plugin initializes in the <code>head</code> property from data retrieved in the file.\nIt takes the front-matter of the input and map it as key => value.</p>\n<h3 id=\"phenomiclibloader-plugin-init-raw-property-from-content\"><a href=\"#phenomiclibloader-plugin-init-raw-property-from-content\" class=\"phenomic-HeadingAnchor\">#</a><code>phenomic/lib/loader-plugin-init-raw-property-from-content</code></h3>\n<p>This plugin initializes in a <code>raw</code> property.\nThis property contains the entire file as raw data.\nUseful if you front-end need to handle the content of the file.</p>\n<h3 id=\"phenomiclibloader-plugin-init-rawbody-property-from-content\"><a href=\"#phenomiclibloader-plugin-init-rawbody-property-from-content\" class=\"phenomic-HeadingAnchor\">#</a><code>phenomic/lib/loader-plugin-init-rawBody-property-from-content</code></h3>\n<p>This plugin initializes in a <code>rawBody</code> property.\nThis property contains the content of the file that is below the front-matter,\nas raw data.\nUseful if you front-end need to handle the content of the file.</p>\n<h3 id=\"phenomiclibloader-plugin-markdown-init-headdescription-property-from-content\"><a href=\"#phenomiclibloader-plugin-markdown-init-headdescription-property-from-content\" class=\"phenomic-HeadingAnchor\">#</a><code>phenomic/lib/loader-plugin-markdown-init-head.description-property-from-content</code></h3>\n<p>This plugin initializes a <code>description</code> property in the <code>head</code>, based on the\ncontent accessible below the front-matter.\nThis plugin assumes your content is markdown and will try to strip the markdown\nin order to offer raw text, handy for meta description, content preview etc.\nBy default will strip to 140 characters (but it won't cut into the middle of a word).\nYou can pass options to <code>phenomic</code> section in webpack configuration.</p>\n<pre><code>{\n  pruneLength: 140, // max length of the description\n  pruneString: \"‚Ä¶\", // string to append after the description\n}\n</code></pre>\n<h3 id=\"phenomiclibloader-plugin-markdown-transform-body-property-to-html\"><a href=\"#phenomiclibloader-plugin-markdown-transform-body-property-to-html\" class=\"phenomic-HeadingAnchor\">#</a><code>phenomic/lib/loader-plugin-markdown-transform-body-property-to-html</code></h3>\n<p>This plugin will transform the <code>body</code> property into html.\nThis plugin will assumes your content is markdown and will use\n<a href=\"http://remark.js.org/\"><code>remark</code></a> with\n<a href=\"https://github.com/MoOx/phenomic/blob/master/src/loader-plugin-markdown-transform-body-property-to-html/index.js\">some plugins</a> for the transformation.</p>\n<h2 id=\"presets\"><a href=\"#presets\" class=\"phenomic-HeadingAnchor\">#</a>Presets</h2>\n<p>A preset is just an array of plugins. It's handy to share a collection of\nplugins.\nTo use a preset, just spread it into the <code>plugins</code> options:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ..</span>\n    plugins: [\n      ...myPreset,\n      anotherPlugin,\n    ]</code></pre>\n<p>‚ö†Ô∏è If you don't know what spread operator is (<code>...</code>), you can see it as a way\nto concat to arrays.\nYou can write this as <code>plugins: myPreset.concat(anotherPlugin)</code> but this\nnotation is more verbose, especially if you have multiple plugins.</p>\n<h2 id=\"existing-presets\"><a href=\"#existing-presets\" class=\"phenomic-HeadingAnchor\">#</a>Existing presets</h2>\n<p>Phenomic provides the following presets:</p>\n<h3 id=\"phenomiclibloader-preset-default\"><a href=\"#phenomiclibloader-preset-default\" class=\"phenomic-HeadingAnchor\">#</a><code>phenomic/lib/loader-preset-default</code></h3>\n<ul>\n<li><code>phenomic/lib/loader-plugin-init-head-property-from-config</code></li>\n<li><code>phenomic/lib/loader-plugin-init-head-property-from-content</code></li>\n<li><code>phenomic/lib/loader-plugin-init-body-property-from-content</code></li>\n</ul>\n<p>üõ† This preset is kind of the phenomic default requirement.\nUse it if you want to use classic files with a front-matter and any text format.\n<strong>Feel free to take a look to markdown preset to implement your own engine!</strong></p>\n<h3 id=\"phenomiclibloader-preset-markdown\"><a href=\"#phenomiclibloader-preset-markdown\" class=\"phenomic-HeadingAnchor\">#</a><code>phenomic/lib/loader-preset-markdown</code></h3>\n<ul>\n<li><code>phenomic/lib/loader-preset-default</code></li>\n<li><code>phenomic/lib/loader-plugin-markdown-init-head.description-property-from-content</code></li>\n<li><code>phenomic/lib/loader-plugin-markdown-transform-body-property-to-html</code></li>\n</ul>\n<p>‚ù§Ô∏è This preset is the one used by default in Phenomic. It allows you to consume\ncommon markdown files that have a front-matter out of the box.</p>\n<h2 id=\"consuming-plugins\"><a href=\"#consuming-plugins\" class=\"phenomic-HeadingAnchor\">#</a>Consuming plugins</h2>\n<p>Let say you want to use something else than the default markdown transformation.</p>\n<p>You can use some plugins, but not the one that will transform the markdown as\nHTML.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { phenomicLoader } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"phenomic\"</span>\n\n<span class=\"hljs-comment\">// ...</span>\n\n  <span class=\"hljs-built_in\">module</span>: {\n   <span class=\"hljs-comment\">// webpack 1</span>\n   loaders: [\n   <span class=\"hljs-comment\">// webpack 2</span>\n   <span class=\"hljs-comment\">// rules: [</span>\n     {\n       test: <span class=\"hljs-regexp\">/\\.(md|markdown)$/</span>,\n       loader: phenomicLoader,\n       query: {\n          context: path.join(config.cwd, config.source),\n\n          plugins: [\n            <span class=\"hljs-comment\">// here are the unopininated default plugins</span>\n            ...require(<span class=\"hljs-string\">\"phenomic/lib/loader-preset-default\"</span>).default,\n\n            <span class=\"hljs-comment\">// Instead of specifing via the preset, you can cherry pick some,</span>\n            <span class=\"hljs-comment\">// require(\"phenomic/lib/loader-plugin-init-head-property-from-config\").default,</span>\n            <span class=\"hljs-comment\">// require(\"phenomic/lib/loader-plugin-init-head-property-from-content\").default,</span>\n            <span class=\"hljs-comment\">// require(\"phenomic/lib/loader-plugin-init-body-property-from-content\").default,</span>\n\n            <span class=\"hljs-comment\">// ...require(\"phenomic/lib/loader-preset-markdown\").default</span>\n            <span class=\"hljs-comment\">// The commented preset above is part of the default renderer.</span>\n            <span class=\"hljs-comment\">// You can also cherry pick on plugin or the other</span>\n            <span class=\"hljs-comment\">// require(\"phenomic/lib/loader-plugin-markdown-init-head.description-property-from-content\").default,</span>\n            <span class=\"hljs-comment\">// require(\"phenomic/lib/loader-plugin-transform-md-body-property-to-html\").default,</span>\n\n            <span class=\"hljs-comment\">// here is an example of another transformation</span>\n            ({ result }) => {\n              <span class=\"hljs-keyword\">return</span> {\n                ...result,\n                body: doYourThing(result.body),\n\n                <span class=\"hljs-comment\">// doYourThing() can be any transformation you want.</span>\n                <span class=\"hljs-comment\">// Per previous plugins, ``body`` will contain the raw input</span>\n                <span class=\"hljs-comment\">// passed to the loader, with the front-matter removed.</span>\n                <span class=\"hljs-comment\">// Feel free to take a look to the plugins source before,</span>\n                <span class=\"hljs-comment\">// it's very short !</span>\n                <span class=\"hljs-comment\">// https://github.com/MoOx/phenomic/blob/master/src/</span>\n              }\n            }\n          ],\n        },\n      },\n\n      <span class=\"hljs-comment\">// ...</span>\n    ]\n  }</code></pre>\n<h2 id=\"writing-plugins\"><a href=\"#writing-plugins\" class=\"phenomic-HeadingAnchor\">#</a>Writing plugins</h2>\n<p>A plugin is just a function that accepts the following parameters:</p>\n<pre><code>({\n  frontMatter: GrayMatterResult,\n  result: PhenomicCollectionItem,\n  options: PhenomicLoaderOptions,\n}) => PhenomicCollectionItem\n</code></pre>\n<p>‚ñ∂Ô∏è <code>frontMatter</code> is the result of the parsing of the file via\n<a href=\"https://www.npmjs.com/package/gray-matter\"><code>gray-matter</code> package</a>\nand is an object:</p>\n<pre><code class=\"hljs language-js\">{\n  orig: string, <span class=\"hljs-comment\">// original content (the file)</span>\n  data: <span class=\"hljs-built_in\">Object</span>, <span class=\"hljs-comment\">// key => value of the front-matter content</span>\n  content: string, <span class=\"hljs-comment\">// the raw content below the front-matter</span>\n}</code></pre>\n<p>‚ñ∂Ô∏è <code>result</code> is a Phenomic collection item.\nIn the first plugin it just an empty object,\nbut at the end of the plugin pipeline it should offer the following object</p>\n<pre><code class=\"hljs language-js\">{\n  head: <span class=\"hljs-built_in\">Object</span>, <span class=\"hljs-comment\">// key => value of the front-matter content</span>\n  body: string, <span class=\"hljs-comment\">// html that will be injected in Phenomic ``&#x3C;BodyContainer>``</span>\n\n  <span class=\"hljs-comment\">// Keys below are reserved for Phenomic (and added after the plugins execution)</span>\n\n  <span class=\"hljs-comment\">// ‚ö†Ô∏è Note that the following keys are added by the phenomicLoader itself</span>\n  <span class=\"hljs-comment\">// you cannot affect those values.</span>\n  __filename: string, <span class=\"hljs-comment\">// original relative filename (eg: usage/plugins.md)</span>\n  __url: string, <span class=\"hljs-comment\">// short uri (eg: usage/plugins/)</span>\n  __resourceUrl: string, <span class=\"hljs-comment\">// long uri (eg: usage/plugins/index.html)</span>\n  __dataUrl: string, <span class=\"hljs-comment\">// data uri (for optimized navigation, eg: usage/plugins.{hash}.json)</span>\n}</code></pre>\n<p>‚ñ∂Ô∏è <code>options</code> are the options of the current loader definition.</p>\n<p>It's a merge of webpack <code>phenomicLoader</code> query options &#x26;\n<code>phenomic.phenomicLoader</code> section of your webpack configuration.</p>\n<p><strong>The plugin must return an <code>result</code> item,\nthat will be added to Phenomic collection.</strong><br>\nYou can add any key you want,\njust be sure to provide the <code>head</code> object and the <code>body</code>.</p>\n<h3 id=\"example-of-a-plugin\"><a href=\"#example-of-a-plugin\" class=\"phenomic-HeadingAnchor\">#</a>Example of a plugin</h3>\n<p>The plugin below is a plugin that transform the <code>body</code>\n(in this case, set before in another plugin).</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> transformMdBodyPropertyToHTML = ({ result }) => {\n  <span class=\"hljs-keyword\">return</span> {\n    ...result, <span class=\"hljs-comment\">// spread the entire result</span>\n    <span class=\"hljs-comment\">// and override the body property by applying a transformation</span>\n    body: doYourThingToHTML(result.body),\n  }\n}</code></pre>\n<p>‚ö†Ô∏è If you want to see some examples for plugins, take a look to</p>\n<p><a href=\"https://github.com/MoOx/phenomic/blob/master/src/\">https://github.com/MoOx/phenomic/blob/master/src/</a></p>\n","__filename":"docs/usage/plugins.md","__url":"/docs/usage/plugins/","__resourceUrl":"/docs/usage/plugins/index.html","__dataUrl":"/docs/usage/plugins/index.html.8802d7b9fe371ce4a2969e5150212fbe.json"}